int:
rx%[0-9]+%rx

float:
rx%[0-9]+.[0-9]+%rx

name:
rx%[a-zA-Z_][a-zA-Z_0-9]*%rx

prim_type:
"i64" | "f64" | "iptr"

type:
"i64" | "f64" | "iptr" | "agg" aggtype

aggtype:
"{" aggtype_inner "}"

agg_item:
prim_type ( "*" int )?

aggtype_inner:
( agg_item ",")+ agg_item
agg_item

simple_expr: @notokens
"(" expr ")"
int | float | name

funccall: @notokens
"(" (expr ",")* expr? ")"

expr_tail:
funccall
cast

cast:
"as" type
"zext" type
"sext" type

base_unexp:
simple_expr expr_tail*

base_binexp:
("-")? base_unexp

binexp_0: @left_recursive
binexp_1 ("&&"|"||") binexp_0
binexp_1

binexp_1: @left_recursive
binexp_2 ("=="|"!="|">="|"<="|">"|"<"|"+>"|"+<"|"+>="|"+<=") binexp_1
binexp_2

binexp_2: @left_recursive
binexp_3 ("+"|"-"|"&"|"|"|"^") binexp_2
binexp_3

binexp_3: @left_recursive
base_binexp ("*"|"+*"|"/"|"+/"|"%"|"+%"|"<<"|">>"|"+>>") binexp_3
base_binexp

expr:
binexp_0

vardec: @notokens
type name "=" expr ";"
type name ";"

defer: @notokens
"onreturn" block

if: @notokens
"if" "(" expr ")" block

while: @notokens
"while" "(" expr ")" block

return: @notokens
"return" expr? ";"

assign: @notokens
name "=" expr ";"

statement:
defer | if | while | vardec | assign | funccall | return

block: @notokens
"{" statement* "}"

funcdefargs: @notokens
"(" (type name ",")* (type name)? ")"

funcdef:
type name funcdefargs block

program:
funcdef+
