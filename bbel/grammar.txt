int:
rx%[0-9]+%rx

float:
rx%[0-9]+.[0-9]+%rx

name:
rx%[a-zA-Z_][a-zA-Z_0-9]*%rx

type:
"i64" | "f64" | "iptr"

simple_expr:
int | float | name

funccall: @notokens
"(" (expr ",")* expr? ")"

expr_tail_0:
funccall (expr_tail_0)?

binexp_base:
simple_expr (expr_tail_0)?

binexp_0: @left_recursive
binexp_1 ("&&"|"||") binexp_0
binexp_1

binexp_1: @left_recursive
binexp_2 ("=="|"!="|">="|"<="|">"|"<") binexp_0
binexp_2

binexp_2: @left_recursive
binexp_3 ("+"|"-"|"&"|"|"|"^") binexp_0
binexp_3

binexp_3: @left_recursive
binexp_base ("*"|"+*"|"/"|"+/"|"%"|"<<"|">>"|"+>>") binexp_0
binexp_base

expr:
binexp_0

vardec: @notokens
type name "=" expr ";"
type name ";"

defer: @notokens
"onreturn" block

if: @notokens
"if" "(" expr ")" block

while: @notokens
"while" "(" expr ")" block

return: @notokens
"return" expr? ";"

assign: @notokens
name "=" expr ";"

statement:
assign | vardec | defer | if | while | funccall | return

block: @notokens
"{" statement* "}"

funcdefargs: @notokens
"(" (type name ",")* (type name)? ")"

funcdef:
type name funcdefargs block

program:
funcdef+
