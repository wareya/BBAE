
func mul_delta returns f64
    arg n f64
    __bbae_temp_1 = mov 0.001000f64
    n2 = fmul n __bbae_temp_1
    return n2
endfunc
func main returns f64
    stack_slot __bbae_temp_6_i 8
    stack_slot __bbae_temp_7_y 8
    stack_slot __bbae_temp_8_vel 8
    stack_slot __bbae_temp_9_g 8
    stack_slot __bbae_temp_10_mul_delta 8
    i = mov 1000000000i64
    y = mov 0.000000f64
    vel = mov 0.000000f64
    g = mov 9.800000f64
    goto grav i y vel g
block grav
    arg i i64
    arg y f64
    arg vel f64
    arg g f64
    mul_delta = symbol_lookup_unsized mul_delta
    store __bbae_temp_6_i i
    store __bbae_temp_7_y y
    store __bbae_temp_8_vel vel
    store __bbae_temp_9_g g
    store __bbae_temp_10_mul_delta mul_delta
    goto __bbae_temp_11_mul_delta g
block __bbae_temp_11_mul_delta
    arg n f64
    __bbae_temp_1 = mov 0.001000f64
    n2 = fmul n __bbae_temp_1
    goto __bbae_temp_5 n2
block __bbae_temp_5
    arg gd f64
    mul_delta = load iptr __bbae_temp_10_mul_delta
    g = load f64 __bbae_temp_9_g
    vel = load f64 __bbae_temp_8_vel
    y = load f64 __bbae_temp_7_y
    i = load i64 __bbae_temp_6_i
    __bbae_temp_2 = mov 0.500000f64
    gd2 = fmul gd __bbae_temp_2
    vel2 = fadd vel gd2
    __bbae_temp_3 = mov 0.001000f64
    vd = fmul vel2 __bbae_temp_3
    y2 = fadd y vd
    vel3 = fadd vel2 gd2
    i2 = sub i 1i64
    cmp = cmp_g i2 0i64
    if cmp goto grav i2 y2 vel3 g else exit y2
block exit
    arg y f64
    return y
endfunc